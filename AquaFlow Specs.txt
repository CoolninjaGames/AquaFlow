2D Grid Based Language.

*case sensitive
Op Codes:
*S - Start
*E - End
*Q - Ends all flows, regardless of any pointer's current state
*T - new Thread/Pointer (runs the code in the next space, it's direction will be set to *dir rule*)
*t - new Thread/Pointer (runs the code in the next space, it's direction will be set to *dir rule 2*)
 = - moves pointer horizotally
 | - moves pointer vertically
 < - changes the pointer's current direction to left
 > - changes the pointer's current direction to right
*v - changes the pointer's current direction to down
 ^ - changes the pointer's current direction to up
*( - stores the next code(which should be a value) into the thread's stack as a number representing a character, this will occur until a matching ) is found.
*# - stores the next code(which should be a value) into the thread's stack as a number, this will occur until a matching # is found
*p - pops the top value from the thread's stack (and gets rid of it)
 + - adds the top value from the thread's stack to the next one in the stack (and pushes it onto the stack)
 - - subtracts the top value from the thread's stack to the next one in the stack (and pushes it onto the stack)
 * - multply the top value from the thread's stack to the next one in the stack (and pushes it onto the stack)
*d - divide the top value from the thread's stack to the next one in the stack (and pushes it onto the stack)
 % - moduluses the top value from the thread's stack to the next one in the stack (and pushes it onto the stack)
*I - gets input from console (only one character at a time) and pushes it to the pointer's stack
*O - prints the top value from the thread's stack to the console (as a character)
*o - prints the top value from the thread's stack to the console (as a number)
 ' - Goes one flow down in the flow stack
 " - Goes a number of flows down in the flow stack, the number being the top most value in the pointer's stack
 ~ - Makes the pointer's top stack value negative
*C - If the pointer's top stack value is positive the pointer will go to *dir rule*, else *dir rule 2* (doesn't pop stack)
*c - If the pointer's top stack value is positive the pointer will go to *dir rule 2*, else *dir rule* (doesn't pop stack)
 \ - mirror (Right <-> Down, Left <-> Up)
 / - mirror (Right <-> Up, Left <-> Down)
 @ replaces a character on the flow (first value on stack = x, second = y, third = character)

 
 
Values:
 char - a character (stored as a it's ASCII code). This is the only value. This value is interpreted differently depending on the op code. 
 negative number - Created when the ~ code is used. This value can only be used in arithmetic and flow movement opperations, any other will throw an error.
 
Dir Rule (Current Dir, New Dir 1 | New Dir 2):
 Left - Down | Up
 Right - Down | Up
 Up - Left | Right
 Down - Left | Right
 
Flow Stack:
 A list of flows, loaded at the begenning of execution.
 When ' is used, the current pointer will go one flow down and retain it's position from the previous flow.
 Pointers will not remember the position on the previous flow.
 Pointer's will face left when entering a new flow.
 
Errors:
 InvalidFlowIndex - Occurs when " is used and the flow being pointer too doesn't exist, because the pointer's current stack value is too high, or low.
 NegativeValue - Occurs when a code that doesn't support a negative value gets a negative value.
 CurrentCrash - Occurs when two pointers try and execute the same instruction at the same time.
 InvalidPointerSpace - Occurs when a pointer is on a space that doesn't have a valid code